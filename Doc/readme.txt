
//本文档用于学习FreeRTOS的应用开发，基于STM32F103VET6


/*  实验1：利用静态内存创建单任务（ 在FreeRTOSConfig.h中需要将configSUPPORT_STATIC_ALLOCATION置1 )  */
/*	实现现象：RGB灯红灯以一定时间闪烁																 */
	


/*  实验2：利用动态内存创建多任务 ( 在FreeRTOSConfig.h中需要将configSUPPORT_STATIC_ALLOCATION置0 )  */
/*	实现现象：RGB灯依次表现出 黄、绿、红、灭 时间相同												 */



/*  实验3：利用绝对延时创建多任务 ( 在FreeRTOSConfig.h中需要将configSUPPORT_STATIC_ALLOCATION置0 )  */
/*	实现现象：任务1执行RGB灯闪烁，当按下Key1则挂起任务1，按下按键二则恢复任务1						 */
/*  当LED_Task和KEY_Task的任务优先级不同时，能从串口上看出不同										 */
/*  LED优先级高于KEY时，当任务被挂起后再次恢复时，直接跳转任务的最高优先级，也就是LED				 */
/*  ，此时将之前需要打印的数据打印结束进入阻塞再次恢复到KEY任务，打印"任务已经恢复"					 */
/*  若KEY优先级高于LED,同理会有相反的现象。														 */
/*  当任务优先级相同时，会分别以时间片享有CPU权，打印时可能会出现杂交状态  							 */



/*  实验四：消息队列收发的收发实验																 */
/*  两个按键控制消息的发送数据，接收任务一直在等待，并根据接收到的信息进行翻转RGB灯					 */
/*  注意：在接收消息的任务中，并没有进行阻塞延时，但接收队列消息的函数用户可以设定等待值				 */
/*  在等待的过程中，该任务进入阻塞状态，当接收到信息以后转而进入就绪态，并等待执行。					 */



/*  实验五：二值信号量的同步实验																	 */
/*  按键1和按键2同时控制释放信号，接受任务同步接收													 */


/*  实验六：计数信号量实验(需要将QUEUE.c中的configUSE_COUNTING_SEMAPHORES宏定义设置为1)			 */
/*  本实验中模拟停车场停车系统，设置为5个车位，初始化时停车场为空   								 */
/*  按下按键1以后获取信号，申请车位，计数减1。按下按键2后，释放信号，停车场空位增加，计数+1            */